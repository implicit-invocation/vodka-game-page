{"version":3,"sources":["confettiRenderer.js","index.js"],"names":["tmp","Vector2","getAngle","x","y","set","angle","getRandomStarType","value","Math","random","getRandomSizeByType","type","width","w","h","createConfettiRender","gl","batch","height","a","flip","loadAtlas","confettiAtlas","coneRegion","findRegion","starRegions","stars","start","length","i","push","speedX","speedY","scale","CONE_HEIGHT","CONE_WIDTH","CONE_X","CONE_Y","update","delta","star","splice","render","draw","DEVICE_PIXEL_RATIO","window","devicePixelRatio","canvas","document","getElementById","info","resizeCanvas","getContext","camera","createOrthoCamera","createBatch","inputHandler","InputHandler","leftConfettiRenderer","rightConfettiRenderer","whiteTex","createWhiteTex","loadTexture","bgTex","spinTex","markerTex","buttonTex","logoTex","resultGlowTex","Promise","all","Array","from","v","k","resultsTex","BG_OFFSET","BG_WIDTH","BG_HEIGHT","SPIN_OFFSET_X","SPIN_OFFSET_Y","SPIN_SIZE","BUTTON_HEIGHT","BUTTON_WIDTH","BUTTON_OFFSET_X","BUTTON_OFFSET_Y","MARKER_WIDTH","MARKER_HEIGHT","MARKER_OFFSET_X","MARKER_OFFSET_Y","LOGO_HEIGHT","LOGO_WIDTH","LOGO_OFFSET_X","LOGO_OFFSET_Y","RESULT_HEIGHT","RESULT_WIDTH","RESULT_OFFSET_X","RESULT_ORIGIN_X","RESULT_OFFSET_Y","RESULT_ORIGIN_Y","SPINNING_DECELERATOR","PI","spinSpeed","markerShaking","spinning","buttonPressed","showingResult","result","resultScale","addEventListener","clearColor","floor","max","isTouched","min","clear","COLOR_BUFFER_BIT","setProjection","combined","begin","setColor","end","game","createGameLoop","setInterval","innerHTML","round","getFps","init"],"mappings":"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","file":"static/js/main.7777b704.chunk.js","sourcesContent":["import { Vector2, loadAtlas } from \"gdxjs\";\n\nconst tmp = new Vector2();\nconst getAngle = (x, y) => {\n  tmp.set(x, y);\n  return tmp.angle();\n};\n\nconst getRandomStarType = () => {\n  const value = Math.random();\n  if (value < 1 / 3) {\n    return 0;\n  } else if (value > 2 / 3) {\n    return 1;\n  } else {\n    return 2;\n  }\n};\n\nconst getRandomSizeByType = (type, width) => {\n  const value = ((Math.random() + 0.5) * width) / 15;\n  if (type === 2) {\n    return { w: value, h: value * 2 };\n  } else {\n    return { w: value, h: value };\n  }\n};\n\nconst createConfettiRender = async (gl, batch, width, height, flip = false) => {\n  const confettiAtlas = await loadAtlas(gl, \"./confetti/confetti.atlas\");\n  const coneRegion = confettiAtlas.findRegion(\"cone\");\n  const starRegions = [\n    confettiAtlas.findRegion(\"star1\"),\n    confettiAtlas.findRegion(\"star2\"),\n    confettiAtlas.findRegion(\"string\")\n  ];\n\n  const stars = [];\n\n  const start = () => {\n    stars.length = 0;\n\n    for (let i = 0; i < 30; i++) {\n      const type = getRandomStarType();\n      const { w, h } = getRandomSizeByType(type, width);\n      stars.push({\n        speedX: (Math.random() + 0.5) * width,\n        speedY: (Math.random() + 0.5) * height,\n        x: 0,\n        y: 0,\n        type,\n        w,\n        h,\n        scale: 1\n      });\n    }\n  };\n\n  const CONE_WIDTH = width / 10;\n  const CONE_HEIGHT = (CONE_WIDTH / coneRegion.width) * coneRegion.height;\n  const CONE_X = !flip ? 0 : width - CONE_WIDTH;\n  const CONE_Y = height - CONE_HEIGHT;\n\n  return {\n    start,\n    update(delta) {\n      for (let star of stars) {\n        star.x += star.speedX * delta;\n        star.y += star.speedY * delta;\n      }\n      for (let i = stars.length - 1; i >= 0; i--) {\n        const star = stars[i];\n        if (star.x > width || star.y > height) {\n          stars.splice(i, 1);\n        }\n      }\n    },\n    render() {\n      if (stars.length <= 0) return;\n      coneRegion.draw(\n        batch,\n        CONE_X,\n        CONE_Y,\n        CONE_WIDTH,\n        CONE_HEIGHT,\n        CONE_WIDTH / 2,\n        CONE_HEIGHT / 2,\n        0,\n        !flip ? -1 : 1,\n        1\n      );\n      for (let star of stars) {\n        const { x, y, w, h, speedX, speedY } = star;\n        starRegions[star.type].draw(\n          batch,\n          !flip ? x - w / 2 : width - (x - w / 2),\n          height - (y - h / 2),\n          w,\n          h,\n          w / 2,\n          h / 2,\n          getAngle(speedX, speedY)\n        );\n      }\n    }\n  };\n};\n\nexport default createConfettiRender;\n","import \"./index.css\";\n\nimport {\n  resizeCanvas,\n  createGameLoop,\n  createOrthoCamera,\n  createBatch,\n  loadTexture,\n  InputHandler\n} from \"gdxjs\";\n\nimport createWhiteTex from \"gl-white-texture\";\nimport createConfettiRender from \"./confettiRenderer\";\n\nconst DEVICE_PIXEL_RATIO = window.devicePixelRatio || 1;\n\nconst canvas = document.getElementById(\"main\");\nconst info = document.getElementById(\"info\");\n\nconst init = async () => {\n  const [width, height] = resizeCanvas(canvas, DEVICE_PIXEL_RATIO);\n  const gl = canvas.getContext(\"webgl\");\n\n  const camera = createOrthoCamera(width, height, width, height);\n  const batch = createBatch(gl);\n  const inputHandler = new InputHandler(canvas);\n\n  const leftConfettiRenderer = await createConfettiRender(\n    gl,\n    batch,\n    width,\n    height,\n    false\n  );\n  const rightConfettiRenderer = await createConfettiRender(\n    gl,\n    batch,\n    width,\n    height,\n    true\n  );\n\n  const whiteTex = createWhiteTex(gl);\n\n  const bgTex = await loadTexture(gl, \"./bg.jpg\");\n  const spinTex = await loadTexture(gl, \"./spin.png\");\n  const markerTex = await loadTexture(gl, \"./marker.png\");\n  const buttonTex = await loadTexture(gl, \"./button.png\");\n  const logoTex = await loadTexture(gl, \"./logo.jpg\");\n  const resultGlowTex = await loadTexture(gl, \"./resultGlow.png\");\n  const resultsTex = await Promise.all(\n    Array.from({ length: 12 }, (v, k) => loadTexture(gl, `./results/${k}.png`))\n  );\n\n  const BG_WIDTH = (width * 300) / 460;\n  const BG_OFFSET = (width - BG_WIDTH) / 2;\n  const BG_HEIGHT = (BG_WIDTH * bgTex.height) / bgTex.width;\n\n  const SPIN_SIZE = width * 0.9;\n  const SPIN_OFFSET_X = width * 0.05;\n  const SPIN_OFFSET_Y = height * 0.5 - SPIN_SIZE / 2;\n\n  const BUTTON_WIDTH = SPIN_SIZE / 3.5;\n  const BUTTON_HEIGHT = (BUTTON_WIDTH / buttonTex.width) * buttonTex.height;\n  const BUTTON_OFFSET_X = width * 0.5 - BUTTON_WIDTH / 2;\n  const BUTTON_OFFSET_Y = SPIN_OFFSET_Y + SPIN_SIZE / 2 - BUTTON_WIDTH / 2;\n\n  const MARKER_HEIGHT = SPIN_SIZE / 6;\n  const MARKER_WIDTH = (MARKER_HEIGHT * markerTex.width) / markerTex.height;\n  const MARKER_OFFSET_X = width * 0.5 - MARKER_WIDTH / 2;\n  const MARKER_OFFSET_Y = SPIN_OFFSET_Y + SPIN_SIZE - MARKER_HEIGHT * 0.6;\n\n  const LOGO_WIDTH = SPIN_SIZE / 2.5;\n  const LOGO_HEIGHT = (LOGO_WIDTH * logoTex.height) / logoTex.width;\n  const LOGO_OFFSET_X = width * 0.5 - LOGO_WIDTH / 2;\n  const LOGO_OFFSET_Y = MARKER_OFFSET_Y + MARKER_HEIGHT * 0.8;\n\n  const RESULT_WIDTH = SPIN_SIZE / 2;\n  const RESULT_HEIGHT =\n    (RESULT_WIDTH * resultsTex[0].height) / resultsTex[0].width;\n  const RESULT_ORIGIN_X = RESULT_WIDTH / 2;\n  const RESULT_ORIGIN_Y = RESULT_HEIGHT * 0.5;\n  const RESULT_OFFSET_X = width * 0.5 - RESULT_ORIGIN_X;\n  const RESULT_OFFSET_Y = height * 0.5 - RESULT_ORIGIN_Y;\n\n  const SPINNING_DECELERATOR = Math.PI / 2;\n\n  let angle = 0;\n  let spinSpeed = 0;\n  let markerShaking = false;\n  let spinning = false;\n  let buttonPressed = false;\n  let showingResult = false;\n  let result = 0;\n\n  let resultScale = 0.5;\n\n  inputHandler.addEventListener(\"touchEnd\", () => {\n    if (showingResult) {\n      showingResult = false;\n    }\n  });\n\n  gl.clearColor(0, 0, 0, 0);\n  const update = delta => {\n    angle += delta * spinSpeed;\n    while (angle >= 2 * Math.PI) {\n      angle -= 2 * Math.PI;\n    }\n    result = Math.floor(angle / (Math.PI / 6));\n    markerShaking = false;\n    if (angle % (Math.PI / 6) < Math.PI / 48) {\n      markerShaking = true;\n    }\n\n    if (spinning) {\n      if (markerShaking) {\n        spinSpeed -= 4 * SPINNING_DECELERATOR * delta;\n      } else {\n        spinSpeed -= SPINNING_DECELERATOR * delta;\n      }\n      spinSpeed = Math.max(0, spinSpeed);\n      if (spinSpeed === 0) {\n        spinning = false;\n        showingResult = true;\n        resultScale = 0.5;\n        rightConfettiRenderer.start();\n        leftConfettiRenderer.start();\n      }\n    }\n\n    if (!showingResult && inputHandler.isTouched()) {\n      buttonPressed = true;\n    }\n\n    if (buttonPressed && !inputHandler.isTouched()) {\n      buttonPressed = false;\n      if (spinning) {\n        spinSpeed += Math.PI * (Math.random() + 1);\n      } else {\n        spinSpeed += 2 * Math.PI * (Math.random() + 1);\n      }\n      spinning = true;\n      spinSpeed = Math.min(spinSpeed, 8 * Math.PI);\n    }\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    batch.setProjection(camera.combined);\n    batch.begin();\n\n    batch.draw(bgTex, BG_OFFSET, 0, BG_WIDTH, BG_HEIGHT);\n    batch.draw(\n      spinTex,\n      SPIN_OFFSET_X,\n      SPIN_OFFSET_Y,\n      SPIN_SIZE,\n      SPIN_SIZE,\n      SPIN_SIZE / 2,\n      SPIN_SIZE / 2,\n      angle + Math.PI\n    );\n    batch.draw(logoTex, LOGO_OFFSET_X, LOGO_OFFSET_Y, LOGO_WIDTH, LOGO_HEIGHT);\n    batch.draw(\n      markerTex,\n      MARKER_OFFSET_X,\n      MARKER_OFFSET_Y,\n      MARKER_WIDTH,\n      MARKER_HEIGHT,\n      MARKER_WIDTH / 2,\n      (MARKER_HEIGHT * 3) / 4,\n      0,\n      1,\n      markerShaking ? 1.1 : 1\n    );\n    batch.draw(\n      buttonTex,\n      BUTTON_OFFSET_X,\n      BUTTON_OFFSET_Y,\n      BUTTON_WIDTH,\n      BUTTON_HEIGHT,\n      BUTTON_WIDTH / 2,\n      BUTTON_WIDTH / 2,\n      0,\n      buttonPressed ? 0.8 : 1,\n      buttonPressed ? 0.8 : 1\n    );\n\n    if (showingResult) {\n      resultScale += (1.5 - resultScale) * 0.075;\n      batch.setColor(0, 0, 0, 0.75);\n      batch.draw(whiteTex, 0, 0, width, height);\n      batch.setColor(1, 1, 1, 1);\n      batch.draw(\n        resultGlowTex,\n        RESULT_OFFSET_X,\n        RESULT_OFFSET_Y,\n        RESULT_WIDTH,\n        RESULT_HEIGHT,\n        RESULT_ORIGIN_X,\n        RESULT_ORIGIN_Y,\n        0,\n        resultScale * 2,\n        resultScale * 2\n      );\n      batch.draw(\n        resultsTex[result],\n        RESULT_OFFSET_X,\n        RESULT_OFFSET_Y,\n        RESULT_WIDTH,\n        RESULT_HEIGHT,\n        RESULT_ORIGIN_X,\n        RESULT_ORIGIN_Y,\n        0,\n        resultScale,\n        resultScale\n      );\n      rightConfettiRenderer.update(delta);\n      rightConfettiRenderer.render();\n      leftConfettiRenderer.update(delta);\n      leftConfettiRenderer.render();\n    }\n\n    batch.end();\n  };\n\n  const game = createGameLoop(update);\n\n  setInterval(\n    () =>\n      (info.innerHTML = `FPS: ${Math.round(\n        game.getFps()\n      )} - Result: ${result}`),\n    1000\n  );\n};\n\ninit();\n"],"sourceRoot":""}